{"ast":null,"code":"import { getSession } from \"next-auth/client\";\nimport { stripe } from \"../../services/stripe\";\nexport default (async (req, res) => {\n  if (req.method === 'POST') {\n    const session = await getSession({\n      req\n    });\n    const stripeCustomer = await stripe.customers.create({\n      email: session.user.email // metadata\n\n    });\n    const stripeCheckoutSession = await stripe.checkout.sessions.create({\n      customer: stripeCustomer.id,\n      payment_method_types: ['card'],\n      billing_address_collection: 'required',\n      line_items: [{\n        price: 'price_1IXuqgC7bTIo4T8PHqAcxnsd',\n        quantity: 1\n      }],\n      mode: 'subscription',\n      allow_promotion_codes: true,\n      success_url: process.env.STRIPE_SUCCESS_URL,\n      cancel_url: process.env.STRIPE_CANCEL_URL\n    });\n    return res.status(200).json({\n      sessionId: stripeCheckoutSession.id\n    });\n  } else {\n    res.setHeader('Allow', 'POST');\n    res.status(405).end('Method not allowed');\n  }\n});","map":{"version":3,"sources":["/home/rodolfo/Documents/Estudo/Ignite/NextJS/Aulas/ignews/Ignite-Ig.News/src/pages/api/subscribe.ts"],"names":["getSession","stripe","req","res","method","session","stripeCustomer","customers","create","email","user","stripeCheckoutSession","checkout","sessions","customer","id","payment_method_types","billing_address_collection","line_items","price","quantity","mode","allow_promotion_codes","success_url","process","env","STRIPE_SUCCESS_URL","cancel_url","STRIPE_CANCEL_URL","status","json","sessionId","setHeader","end"],"mappings":"AACA,SAASA,UAAT,QAA2B,kBAA3B;AACA,SAASC,MAAT,QAAuB,uBAAvB;AAGA,gBAAe,OAAOC,GAAP,EAA4BC,GAA5B,KAAqD;AAClE,MAAID,GAAG,CAACE,MAAJ,KAAe,MAAnB,EAA2B;AAEzB,UAAMC,OAAO,GAAG,MAAML,UAAU,CAAC;AAAEE,MAAAA;AAAF,KAAD,CAAhC;AAEA,UAAMI,cAAc,GAAE,MAAML,MAAM,CAACM,SAAP,CAAiBC,MAAjB,CAAwB;AAClDC,MAAAA,KAAK,EAAEJ,OAAO,CAACK,IAAR,CAAaD,KAD8B,CAElD;;AAFkD,KAAxB,CAA5B;AAKA,UAAME,qBAAqB,GAAG,MAAMV,MAAM,CAACW,QAAP,CAAgBC,QAAhB,CAAyBL,MAAzB,CAAgC;AAClEM,MAAAA,QAAQ,EAAER,cAAc,CAACS,EADyC;AAElEC,MAAAA,oBAAoB,EAAE,CAAC,MAAD,CAF4C;AAGlEC,MAAAA,0BAA0B,EAAE,UAHsC;AAIlEC,MAAAA,UAAU,EAAE,CACV;AAAEC,QAAAA,KAAK,EAAE,gCAAT;AAA2CC,QAAAA,QAAQ,EAAE;AAArD,OADU,CAJsD;AAOlEC,MAAAA,IAAI,EAAE,cAP4D;AAQlEC,MAAAA,qBAAqB,EAAE,IAR2C;AASlEC,MAAAA,WAAW,EAAEC,OAAO,CAACC,GAAR,CAAYC,kBATyC;AAUlEC,MAAAA,UAAU,EAAEH,OAAO,CAACC,GAAR,CAAYG;AAV0C,KAAhC,CAApC;AAaA,WAAOzB,GAAG,CAAC0B,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEC,MAAAA,SAAS,EAAEpB,qBAAqB,CAACI;AAAnC,KAArB,CAAP;AAED,GAxBD,MAwBO;AACLZ,IAAAA,GAAG,CAAC6B,SAAJ,CAAc,OAAd,EAAuB,MAAvB;AACA7B,IAAAA,GAAG,CAAC0B,MAAJ,CAAW,GAAX,EAAgBI,GAAhB,CAAoB,oBAApB;AACD;AACF,CA7BD","sourcesContent":["import { NextApiRequest, NextApiResponse } from \"next\";\nimport { getSession } from \"next-auth/client\";\nimport { stripe } from \"../../services/stripe\";\n\n\nexport default async (req: NextApiRequest, res: NextApiResponse) => {\n  if (req.method === 'POST') {\n\n    const session = await getSession({ req })\n\n    const stripeCustomer =await stripe.customers.create({\n      email: session.user.email,\n      // metadata\n    })\n\n    const stripeCheckoutSession = await stripe.checkout.sessions.create({\n      customer: stripeCustomer.id,\n      payment_method_types: ['card'],\n      billing_address_collection: 'required',\n      line_items: [\n        { price: 'price_1IXuqgC7bTIo4T8PHqAcxnsd', quantity: 1 }\n      ],\n      mode: 'subscription',\n      allow_promotion_codes: true,\n      success_url: process.env.STRIPE_SUCCESS_URL,\n      cancel_url: process.env.STRIPE_CANCEL_URL\n    })\n\n    return res.status(200).json({ sessionId: stripeCheckoutSession.id })\n\n  } else {\n    res.setHeader('Allow', 'POST')\n    res.status(405).end('Method not allowed')\n  }\n}"]},"metadata":{},"sourceType":"module"}