{"ast":null,"code":"import { query as q } from 'faunadb';\nimport NextAuth from 'next-auth';\nimport Providers from 'next-auth/providers';\nimport { fauna } from '../../../services/fauna';\nexport default NextAuth({\n  providers: [Providers.GitHub({\n    clientId: process.env.GITHUB_ID,\n    clientSecret: process.env.GITHUB_SECRET,\n    scope: 'read:user'\n  })],\n  callbacks: {\n    async signIn(user, account, profile) {\n      const {\n        email\n      } = user;\n\n      try {\n        await fauna.query(q.If(q.Not(q.Exists(q.Match(q.Index('user_by_email'), q.Casefold(user.email)))), q.Create(q.Collection('users'), {\n          data: {\n            email\n          }\n        }), q.Get(q.Match(q.Index('user_by_email'), q.Casefold(user.email)))));\n        return true;\n      } catch {\n        return false;\n      }\n    }\n\n  }\n});","map":{"version":3,"sources":["/home/rodolfo/Documents/Estudo/Ignite/NextJS/Aulas/ignews/Ignite-Ig.News/src/pages/api/auth/[...nextauth].ts"],"names":["query","q","NextAuth","Providers","fauna","providers","GitHub","clientId","process","env","GITHUB_ID","clientSecret","GITHUB_SECRET","scope","callbacks","signIn","user","account","profile","email","If","Not","Exists","Match","Index","Casefold","Create","Collection","data","Get"],"mappings":"AAAA,SAASA,KAAK,IAAIC,CAAlB,QAA2B,SAA3B;AAEA,OAAOC,QAAP,MAAqB,WAArB;AACA,OAAOC,SAAP,MAAsB,qBAAtB;AAGA,SAASC,KAAT,QAAsB,yBAAtB;AAEA,eAAeF,QAAQ,CAAC;AAEtBG,EAAAA,SAAS,EAAE,CACTF,SAAS,CAACG,MAAV,CAAiB;AACfC,IAAAA,QAAQ,EAAEC,OAAO,CAACC,GAAR,CAAYC,SADP;AAEfC,IAAAA,YAAY,EAAEH,OAAO,CAACC,GAAR,CAAYG,aAFX;AAGfC,IAAAA,KAAK,EAAE;AAHQ,GAAjB,CADS,CAFW;AAStBC,EAAAA,SAAS,EAAE;AACT,UAAMC,MAAN,CAAaC,IAAb,EAAmBC,OAAnB,EAA4BC,OAA5B,EAAqC;AACnC,YAAM;AAAEC,QAAAA;AAAF,UAAYH,IAAlB;;AAEA,UAAI;AACF,cAAMZ,KAAK,CAACJ,KAAN,CACJC,CAAC,CAACmB,EAAF,CACEnB,CAAC,CAACoB,GAAF,CACEpB,CAAC,CAACqB,MAAF,CACErB,CAAC,CAACsB,KAAF,CACEtB,CAAC,CAACuB,KAAF,CAAQ,eAAR,CADF,EAEEvB,CAAC,CAACwB,QAAF,CAAWT,IAAI,CAACG,KAAhB,CAFF,CADF,CADF,CADF,EASElB,CAAC,CAACyB,MAAF,CACEzB,CAAC,CAAC0B,UAAF,CAAa,OAAb,CADF,EAEE;AAAEC,UAAAA,IAAI,EAAE;AAAET,YAAAA;AAAF;AAAR,SAFF,CATF,EAaElB,CAAC,CAAC4B,GAAF,CACE5B,CAAC,CAACsB,KAAF,CACEtB,CAAC,CAACuB,KAAF,CAAQ,eAAR,CADF,EAEEvB,CAAC,CAACwB,QAAF,CAAWT,IAAI,CAACG,KAAhB,CAFF,CADF,CAbF,CADI,CAAN;AAuBA,eAAO,IAAP;AAED,OA1BD,CA0BE,MAAM;AACN,eAAO,KAAP;AACD;AAEF;;AAlCQ;AATW,CAAD,CAAvB","sourcesContent":["import { query as q } from 'faunadb'\n\nimport NextAuth from 'next-auth'\nimport Providers from 'next-auth/providers'\n\n\nimport { fauna } from '../../../services/fauna'\n\nexport default NextAuth({\n\n  providers: [\n    Providers.GitHub({\n      clientId: process.env.GITHUB_ID,\n      clientSecret: process.env.GITHUB_SECRET,\n      scope: 'read:user'\n    }),\n  ],\n  callbacks: {\n    async signIn(user, account, profile) {\n      const { email } = user\n      \n      try {\n        await fauna.query(\n          q.If(\n            q.Not(\n              q.Exists(\n                q.Match(\n                  q.Index('user_by_email'),\n                  q.Casefold(user.email)\n                )\n              )\n            ),\n            q.Create(\n              q.Collection('users'),\n              { data: { email } }\n            ),\n            q.Get(\n              q.Match(\n                q.Index('user_by_email'),\n                q.Casefold(user.email)\n              )\n            )\n          )\n        )\n\n        return true\n\n      } catch {\n        return false\n      }\n\n    }\n  },\n\n})"]},"metadata":{},"sourceType":"module"}