{"ast":null,"code":"import { stripe } from \"../../services/stripe\";\n\nasync function buffer(readable) {\n  const chunks = [];\n\n  for await (const chunk of readable) {\n    chunks.push(typeof chunk === \"string\" ? Buffer.from(chunk) : chunk);\n  }\n\n  return Buffer.concat(chunks);\n}\n\nexport const config = {\n  api: {\n    bodyParser: false\n  }\n};\nconst relevantEvents = new Set(['checkout.session.completed']);\nexport default (async (req, res) => {\n  if (req.method === 'POST') {\n    const buf = await buffer(req);\n    const secret = req.headers['stripe-signature'];\n    let event;\n\n    try {\n      event = stripe.webhooks.constructEvent(buf, secret, process.env.STRIPE_WEBHOOK_SECRET);\n    } catch (err) {\n      return res.status(400).send(`Webhook error: ${err.message}`);\n    }\n\n    const {\n      type\n    } = event;\n\n    if (relevantEvents.has(type)) {\n      console.log('Evento recebido', event);\n    }\n\n    res.json({\n      received: true\n    });\n  } else {\n    res.setHeader('Allow', 'POST');\n    res.status(405).end('Method not allowed');\n  }\n});","map":{"version":3,"sources":["/home/rodolfo/Documents/Estudo/Ignite/NextJS/Aulas/ignews/Ignite-Ig.News/src/pages/api/webhooks.ts"],"names":["stripe","buffer","readable","chunks","chunk","push","Buffer","from","concat","config","api","bodyParser","relevantEvents","Set","req","res","method","buf","secret","headers","event","webhooks","constructEvent","process","env","STRIPE_WEBHOOK_SECRET","err","status","send","message","type","has","console","log","json","received","setHeader","end"],"mappings":"AAIA,SAASA,MAAT,QAAuB,uBAAvB;;AAEA,eAAeC,MAAf,CAAsBC,QAAtB,EAA0C;AACxC,QAAMC,MAAM,GAAG,EAAf;;AAEA,aAAW,MAAMC,KAAjB,IAA0BF,QAA1B,EAAoC;AAClCC,IAAAA,MAAM,CAACE,IAAP,CACE,OAAOD,KAAP,KAAiB,QAAjB,GAA4BE,MAAM,CAACC,IAAP,CAAYH,KAAZ,CAA5B,GAAiDA,KADnD;AAGD;;AAED,SAAOE,MAAM,CAACE,MAAP,CAAcL,MAAd,CAAP;AACD;;AAED,OAAO,MAAMM,MAAM,GAAG;AACpBC,EAAAA,GAAG,EAAE;AACHC,IAAAA,UAAU,EAAE;AADT;AADe,CAAf;AAMP,MAAMC,cAAc,GAAG,IAAIC,GAAJ,CAAQ,CAC7B,4BAD6B,CAAR,CAAvB;AAIA,gBAAe,OAAOC,GAAP,EAA4BC,GAA5B,KAAqD;AAElE,MAAID,GAAG,CAACE,MAAJ,KAAe,MAAnB,EAA2B;AACzB,UAAMC,GAAG,GAAG,MAAMhB,MAAM,CAACa,GAAD,CAAxB;AACA,UAAMI,MAAM,GAAGJ,GAAG,CAACK,OAAJ,CAAY,kBAAZ,CAAf;AAEA,QAAIC,KAAJ;;AAEA,QAAI;AACFA,MAAAA,KAAK,GAAGpB,MAAM,CAACqB,QAAP,CAAgBC,cAAhB,CAA+BL,GAA/B,EAAoCC,MAApC,EAA4CK,OAAO,CAACC,GAAR,CAAYC,qBAAxD,CAAR;AAED,KAHD,CAGE,OAAOC,GAAP,EAAY;AACZ,aAAOX,GAAG,CAACY,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAsB,kBAAiBF,GAAG,CAACG,OAAQ,EAAnD,CAAP;AACD;;AAED,UAAM;AAAEC,MAAAA;AAAF,QAAWV,KAAjB;;AAEA,QAAIR,cAAc,CAACmB,GAAf,CAAmBD,IAAnB,CAAJ,EAA8B;AAC5BE,MAAAA,OAAO,CAACC,GAAR,CAAY,iBAAZ,EAA+Bb,KAA/B;AACD;;AAEDL,IAAAA,GAAG,CAACmB,IAAJ,CAAS;AAAEC,MAAAA,QAAQ,EAAE;AAAZ,KAAT;AAED,GArBD,MAqBO;AACLpB,IAAAA,GAAG,CAACqB,SAAJ,CAAc,OAAd,EAAuB,MAAvB;AACArB,IAAAA,GAAG,CAACY,MAAJ,CAAW,GAAX,EAAgBU,GAAhB,CAAoB,oBAApB;AACD;AAEF,CA5BD","sourcesContent":["\nimport { NextApiRequest, NextApiResponse } from \"next\";\nimport { Readable } from 'stream'\nimport Stripe from \"stripe\";\nimport { stripe } from \"../../services/stripe\";\n\nasync function buffer(readable: Readable) {\n  const chunks = []\n\n  for await (const chunk of readable) {\n    chunks.push(\n      typeof chunk === \"string\" ? Buffer.from(chunk) : chunk\n    )\n  }\n  \n  return Buffer.concat(chunks)\n}\n\nexport const config = {\n  api: {\n    bodyParser: false\n  }\n}\n\nconst relevantEvents = new Set([\n  'checkout.session.completed'\n])\n\nexport default async (req: NextApiRequest, res: NextApiResponse) => {\n\n  if (req.method === 'POST') {\n    const buf = await buffer(req)\n    const secret = req.headers['stripe-signature']\n\n    let event: Stripe.Event\n\n    try {\n      event = stripe.webhooks.constructEvent(buf, secret, process.env.STRIPE_WEBHOOK_SECRET)\n\n    } catch (err) {\n      return res.status(400).send(`Webhook error: ${err.message}`)\n    }\n\n    const { type } = event\n\n    if (relevantEvents.has(type)) {\n      console.log('Evento recebido', event)\n    }\n\n    res.json({ received: true })\n\n  } else {\n    res.setHeader('Allow', 'POST')\n    res.status(405).end('Method not allowed')\n  }\n\n}"]},"metadata":{},"sourceType":"module"}