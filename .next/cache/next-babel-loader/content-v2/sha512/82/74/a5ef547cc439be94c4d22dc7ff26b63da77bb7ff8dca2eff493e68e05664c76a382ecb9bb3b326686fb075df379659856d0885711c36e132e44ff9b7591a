{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/home/rodolfo/Documents/Estudo/Ignite/NextJS/Aulas/ignews/Ignite-Ig.News/src/pages/posts/preview/[slug].tsx\";\nimport { useSession } from \"next-auth/client\";\nimport Head from \"next/head\";\nimport Link from \"next/link\";\nimport { RichText } from \"prismic-dom\";\nimport { useEffect } from \"react\";\nimport { getPrismicClient } from \"../../../services/prismic\";\nimport styles from '../post.module.scss';\nexport default function PostPreview({\n  post\n}) {\n  const [session] = useSession();\n  const router = useRouter();\n  useEffect(() => {\n    if (session.activeSubscription) {\n      router.push(`/posts/${post.slug}`);\n    }\n  }, []);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Head, {\n      children: /*#__PURE__*/_jsxDEV(\"title\", {\n        children: [post.title, \" | Ignews\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"main\", {\n      className: styles.container,\n      children: /*#__PURE__*/_jsxDEV(\"article\", {\n        className: styles.post,\n        children: [/*#__PURE__*/_jsxDEV(\"time\", {\n          children: post.updatedAt\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 39,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n          children: post.title\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 40,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `${styles.postContent} ${styles.previewContent}`,\n          dangerouslySetInnerHTML: {\n            __html: post.content\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 41,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: styles.continueReading,\n          children: [\"Wanna continue reading?\", /*#__PURE__*/_jsxDEV(Link, {\n            href: \"/\",\n            children: /*#__PURE__*/_jsxDEV(\"a\", {\n              children: \"Subscribe now \\uD83E\\uDD17\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 49,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 48,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 46,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\nexport const getStaticPaths = () => {\n  return {\n    paths: [],\n    fallback: 'blocking'\n  };\n};\nexport const getStaticProps = async ({\n  params\n}) => {\n  const {\n    slug\n  } = params;\n  const prismic = getPrismicClient();\n  const response = await prismic.getByUID('post', String(slug), {});\n  const post = {\n    slug,\n    title: RichText.asText(response.data.title),\n    content: RichText.asHtml(response.data.content.splice(0, 3)),\n    updatedAt: new Date(response.last_publication_date).toLocaleDateString('pt-BR', {\n      day: '2-digit',\n      month: 'long',\n      year: 'numeric'\n    })\n  };\n  return {\n    props: {\n      post\n    }\n  };\n};","map":{"version":3,"sources":["/home/rodolfo/Documents/Estudo/Ignite/NextJS/Aulas/ignews/Ignite-Ig.News/src/pages/posts/preview/[slug].tsx"],"names":["useSession","Head","Link","RichText","useEffect","getPrismicClient","styles","PostPreview","post","session","router","useRouter","activeSubscription","push","slug","title","container","updatedAt","postContent","previewContent","__html","content","continueReading","getStaticPaths","paths","fallback","getStaticProps","params","prismic","response","getByUID","String","asText","data","asHtml","splice","Date","last_publication_date","toLocaleDateString","day","month","year","props"],"mappings":"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","sourcesContent":["import { GetStaticProps } from \"next\"\nimport { getSession, useSession } from \"next-auth/client\"\nimport Head from \"next/head\"\nimport Link from \"next/link\"\n\nimport { RichText } from \"prismic-dom\"\nimport { useEffect } from \"react\"\nimport { getPrismicClient } from \"../../../services/prismic\"\n\nimport styles from '../post.module.scss'\n\ninterface PostPreviewProps {\n  post: {\n    slug: string\n    title: string\n    content: string\n    updatedAt: string\n  }\n}\n\nexport default function PostPreview({ post }: PostPreviewProps) {\n  const [session] = useSession()\n  const router = useRouter()\n\n  useEffect(() => {\n    if (session.activeSubscription) {\n      router.push(`/posts/${post.slug}`)\n    }\n  }, [])\n\n  return (\n    <>\n      <Head>\n        <title>{post.title} | Ignews</title>\n      </Head>\n\n      <main className={styles.container}>\n        <article className={styles.post}>\n          <time>{post.updatedAt}</time>\n          <h1>{post.title}</h1>\n          <div \n            className={`${styles.postContent} ${styles.previewContent}`}\n            dangerouslySetInnerHTML={{ __html: post.content }} \n          />\n\n          <div className={styles.continueReading}>\n            Wanna continue reading?\n            <Link href=\"/\">\n              <a>Subscribe now ðŸ¤—</a>\n            </Link>\n          </div>\n        </article>\n      </main>\n    </>\n  )\n}\n\nexport const getStaticPaths = () => {\n  return {\n    paths: [],\n    fallback: 'blocking'\n  }\n}\n\nexport const getStaticProps: GetStaticProps = async ({ params }) => {\n  const { slug } = params\n  \n  const prismic = getPrismicClient()\n\n  const response = await prismic.getByUID('post', String(slug), {})\n\n  const post = {\n    slug,\n    title: RichText.asText(response.data.title),\n    content: RichText.asHtml(response.data.content.splice(0, 3)),\n    updatedAt: new Date(response.last_publication_date).toLocaleDateString('pt-BR', {\n      day: '2-digit',\n      month: 'long',\n      year: 'numeric'\n    })\n  }\n\n  return {\n    props: {\n      post,\n    }\n  }\n}"]},"metadata":{},"sourceType":"module"}