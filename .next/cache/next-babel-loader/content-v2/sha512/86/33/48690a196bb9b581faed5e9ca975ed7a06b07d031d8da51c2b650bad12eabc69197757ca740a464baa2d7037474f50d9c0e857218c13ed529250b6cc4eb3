{"ast":null,"code":"import { query as q } from 'faunadb';\nimport { getSession } from \"next-auth/client\";\nimport { fauna } from \"../../services/fauna\";\nimport { stripe } from \"../../services/stripe\";\nexport default (async (req, res) => {\n  if (req.method === 'POST') {\n    const session = await getSession({\n      req\n    });\n    const user = await fauna.query(q.Get(q.Match(q.Index('user_by_email'), q.Casefold(session.user.email))));\n    const stripeCustomer = await stripe.customers.create({\n      email: session.user.email // metadata\n\n    });\n    await fauna.query(q.Update(q.Ref(q.Collection('users'), user.ref.id), {\n      data: {\n        stripe_customer_id: stripeCustomer.id\n      }\n    }));\n    const stripeCheckoutSession = await stripe.checkout.sessions.create({\n      customer: stripeCustomer.id,\n      payment_method_types: ['card'],\n      billing_address_collection: 'required',\n      line_items: [{\n        price: 'price_1IXuqgC7bTIo4T8PHqAcxnsd',\n        quantity: 1\n      }],\n      mode: 'subscription',\n      allow_promotion_codes: true,\n      success_url: process.env.STRIPE_SUCCESS_URL,\n      cancel_url: process.env.STRIPE_CANCEL_URL\n    });\n    return res.status(200).json({\n      sessionId: stripeCheckoutSession.id\n    });\n  } else {\n    res.setHeader('Allow', 'POST');\n    res.status(405).end('Method not allowed');\n  }\n});","map":{"version":3,"sources":["/home/rodolfo/Documents/Estudo/Ignite/NextJS/Aulas/ignews/Ignite-Ig.News/src/pages/api/subscribe.ts"],"names":["query","q","getSession","fauna","stripe","req","res","method","session","user","Get","Match","Index","Casefold","email","stripeCustomer","customers","create","Update","Ref","Collection","ref","id","data","stripe_customer_id","stripeCheckoutSession","checkout","sessions","customer","payment_method_types","billing_address_collection","line_items","price","quantity","mode","allow_promotion_codes","success_url","process","env","STRIPE_SUCCESS_URL","cancel_url","STRIPE_CANCEL_URL","status","json","sessionId","setHeader","end"],"mappings":"AACA,SAASA,KAAK,IAAIC,CAAlB,QAA2B,SAA3B;AACA,SAASC,UAAT,QAA2B,kBAA3B;AACA,SAASC,KAAT,QAAsB,sBAAtB;AACA,SAASC,MAAT,QAAuB,uBAAvB;AASA,gBAAe,OAAOC,GAAP,EAA4BC,GAA5B,KAAqD;AAClE,MAAID,GAAG,CAACE,MAAJ,KAAe,MAAnB,EAA2B;AAEzB,UAAMC,OAAO,GAAG,MAAMN,UAAU,CAAC;AAAEG,MAAAA;AAAF,KAAD,CAAhC;AAEA,UAAMI,IAAI,GAAG,MAAMN,KAAK,CAACH,KAAN,CACjBC,CAAC,CAACS,GAAF,CACET,CAAC,CAACU,KAAF,CACEV,CAAC,CAACW,KAAF,CAAQ,eAAR,CADF,EAEEX,CAAC,CAACY,QAAF,CAAWL,OAAO,CAACC,IAAR,CAAaK,KAAxB,CAFF,CADF,CADiB,CAAnB;AASA,UAAMC,cAAc,GAAE,MAAMX,MAAM,CAACY,SAAP,CAAiBC,MAAjB,CAAwB;AAClDH,MAAAA,KAAK,EAAEN,OAAO,CAACC,IAAR,CAAaK,KAD8B,CAElD;;AAFkD,KAAxB,CAA5B;AAKA,UAAMX,KAAK,CAACH,KAAN,CACJC,CAAC,CAACiB,MAAF,CACEjB,CAAC,CAACkB,GAAF,CAAMlB,CAAC,CAACmB,UAAF,CAAa,OAAb,CAAN,EAA6BX,IAAI,CAACY,GAAL,CAASC,EAAtC,CADF,EAEE;AACEC,MAAAA,IAAI,EAAE;AACJC,QAAAA,kBAAkB,EAAET,cAAc,CAACO;AAD/B;AADR,KAFF,CADI,CAAN;AAWA,UAAMG,qBAAqB,GAAG,MAAMrB,MAAM,CAACsB,QAAP,CAAgBC,QAAhB,CAAyBV,MAAzB,CAAgC;AAClEW,MAAAA,QAAQ,EAAEb,cAAc,CAACO,EADyC;AAElEO,MAAAA,oBAAoB,EAAE,CAAC,MAAD,CAF4C;AAGlEC,MAAAA,0BAA0B,EAAE,UAHsC;AAIlEC,MAAAA,UAAU,EAAE,CACV;AAAEC,QAAAA,KAAK,EAAE,gCAAT;AAA2CC,QAAAA,QAAQ,EAAE;AAArD,OADU,CAJsD;AAOlEC,MAAAA,IAAI,EAAE,cAP4D;AAQlEC,MAAAA,qBAAqB,EAAE,IAR2C;AASlEC,MAAAA,WAAW,EAAEC,OAAO,CAACC,GAAR,CAAYC,kBATyC;AAUlEC,MAAAA,UAAU,EAAEH,OAAO,CAACC,GAAR,CAAYG;AAV0C,KAAhC,CAApC;AAaA,WAAOnC,GAAG,CAACoC,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEC,MAAAA,SAAS,EAAEnB,qBAAqB,CAACH;AAAnC,KAArB,CAAP;AAED,GA5CD,MA4CO;AACLhB,IAAAA,GAAG,CAACuC,SAAJ,CAAc,OAAd,EAAuB,MAAvB;AACAvC,IAAAA,GAAG,CAACoC,MAAJ,CAAW,GAAX,EAAgBI,GAAhB,CAAoB,oBAApB;AACD;AACF,CAjDD","sourcesContent":["import { NextApiRequest, NextApiResponse } from \"next\";\nimport { query as q } from 'faunadb'\nimport { getSession } from \"next-auth/client\";\nimport { fauna } from \"../../services/fauna\";\nimport { stripe } from \"../../services/stripe\";\n\ntype User  = {\n  ref: {\n    id: string\n  }\n}\n\n\nexport default async (req: NextApiRequest, res: NextApiResponse) => {\n  if (req.method === 'POST') {\n\n    const session = await getSession({ req })\n\n    const user = await fauna.query<User>(\n      q.Get(\n        q.Match(\n          q.Index('user_by_email'),\n          q.Casefold(session.user.email)\n        )\n      )\n    )\n\n    const stripeCustomer =await stripe.customers.create({\n      email: session.user.email,\n      // metadata\n    })\n\n    await fauna.query(\n      q.Update(\n        q.Ref(q.Collection('users'), user.ref.id),\n        {\n          data: {\n            stripe_customer_id: stripeCustomer.id,\n          }\n        }\n      )\n    )\n\n    const stripeCheckoutSession = await stripe.checkout.sessions.create({\n      customer: stripeCustomer.id,\n      payment_method_types: ['card'],\n      billing_address_collection: 'required',\n      line_items: [\n        { price: 'price_1IXuqgC7bTIo4T8PHqAcxnsd', quantity: 1 }\n      ],\n      mode: 'subscription',\n      allow_promotion_codes: true,\n      success_url: process.env.STRIPE_SUCCESS_URL,\n      cancel_url: process.env.STRIPE_CANCEL_URL\n    })\n\n    return res.status(200).json({ sessionId: stripeCheckoutSession.id })\n\n  } else {\n    res.setHeader('Allow', 'POST')\n    res.status(405).end('Method not allowed')\n  }\n}"]},"metadata":{},"sourceType":"module"}